============================================
01 git 로컬 저장소 관리하기
1. git 로컬 저장소 관리하기
2. git 소스 추가 및 스테이징 관리 
3. git 커밋 관리하기  


02 GitHub 원격 저장소 생성 및 관리 
1. GitHub 원격저장소 생성하기
2. git 원격 저장소 주소 등록하기
3. git 로컬 저장소 소스 원격 저장소 반영하기


03 git 로컬/원격 브랜치 관리하기 
1. git 브랜치 목록 관리 
2. 로컬 브랜치 생성 및 원격 브랜치 반영 
3. 로컬 브랜치 병합 및 원격 저장소 반영 



=============================================






1)GitHub 원격 레포지토리에서의 깃 브랜치 생성 및 병합하기 

1.개발소스 만들기
2.로컬 git 저장소 만들고 소스 반영하기 
git init
git add .
git commit  -m "feat 최초커밋"
** 로컬 main 저장소 생성됨



=================================================
3.GitHub 원격저장소 만들기
-github 사이트에서 신규 원격저장소 생성하기 
-원격저장소 링크 복사 
https://github.com/eddykang1074/sample4.git
================================================



4.Github원격저장소 주소 저장 remote
git branch -M main //깃 마스터 브랜치를 main 브랜치로 변경

git remote add origin 깃허브 원격저장소 주소
git remote add origin https://github.com/eddykang1074/sample4.git

5.원격 저장소에 개발사항 반영
git push origin main


=============================================
6.Github원격저장소에 origin/main 브랜치 생성 및 소스가 반영됨
=============================================


7.브랜치 목록 확인하기 
git branch 

8.로컬 브랜치 생성 및 브랜치 이동
git branch eddy-branch
git checkout eddy-branch

9.로컬 브랜치 기반 원격 브랜치 생성하고 소스 반영하기 
git push origin eddy-branch


================================================
10. Github원격저장소에 origin/eddy-branch 원격 브랜치 생성 및 소스 반영
================================================


11. 로컬 브랜치에서 수정작업하고 원격 브랜치에 작업내용 반영하기
git checkout eddy-branch
git add .
git commit  -m "eddy-branch 수정1"
git push origin eddy-branch


===============================================
12. origin/eddy-branch에 작업내용 반영됨
===============================================

13. 브랜치 변경 작업내용 main에 반영하기 
 git checkout main               //메인 브랜치 이동
 git pull origin main            //원격 저장소 최신버전 가져오기 
 git merge eddy-branch     //로컬 브랜치 내용 로컬 메인 병합하기
 git push origin main          // 로컬 메인 원격저장소 메인에 반영하기 


===============================================
14. origin/eddy-branch에 작업내용 반영됨
===============================================


2)기타 깃 명령어 
로컬 레포지토리에서의 깃 브랜치 생성 및 병합하기 

--현재 브랜치 및 브랜치 목록 확인
git branch

--eddy_branch1 브랜치 생성
git branch eddy-branch1

--eddy_branch1 브랜치로 이동
git checkout eddy-branch1


--eddy_branch1 브랜치 생성 및 해당 브랜치로 이도
git branch -b eddy-branch1


-현재 브랜치 수정이력 확인
git log

-모든 브랜치의 수정이력 확인 
git log --branches

--브랜치와 최종 커밋 메시지만 확인하기 
git log --branches --graph --oneline


================

--메인 브랜치와 특정 브랜치 비교하기 
git log main..eddy-branch1

--메인 브랜치와 특정 브랜치 수정된 내용확인하기
git log -p main..eddy-branch1

--메인 브랜치와 특정 브랜치 내용 비교
git diff main..eddy-branch1

**엔터키를 치면 단계적으로 모든 내용 출력 END나오면 끝..
**빠져나올떄 :q 로 터미널 이동


=======================

--브랜치 머징(병합)
** 메인 브랜치로 이동하기 현재 브랜치의 모든 내용을 커밋한다.
git checkout main


--main 브랜치에 대상 브랜치 내용 병합하기 
git merge eddy-branch1

--병합을 끝낸 브랜치 삭제하기 
git branch -d eddy-branch1

--병합하지 않은 브랜치 삭제하기 
git branch -D eddy-branch1


=======================================================
3) 깃 커밋 메시지 포맷 
=======================================================
type(): [#issueNumber ]제목 : 필수

Body:옵션)커밋내용

Footer

=======================

type(feat,fix,docs,style,reactor,test,chore,release): [#issueNumber - ]제목 : 필수
-feat: 새로운 기능을 추가하거나 기존의 기능을 요구 사항 변경으로 변경한 경우
기능 추가와 수정을 나누어서 쓰고 싶은 경우 아래 처럼 2개로 나누어서 타입을 지정할 수 있다.
ㄴnew: 새로운 기능을 추가 한 경우
ㄴimprove: 기존 기능을 수정 한 경우, 요구 사항이 변경되어 수정된 경우에도 improve 타입으로 한다.
-fix: 기능상 버그 픽스를 했을 경우
-docs: 문서(주석)의 추가/수정의 경우, 직접적인 코드의 변화 없이 순수하게 문서(주석)만 추가/수정했을 경우
-style: UI를 추가/변경 하거나 스타일 관련 작업을 했을 경우
-refactor: 기능의 변화가 아닌 코드를 리팩토링했을 경우, 코드 리뷰 등으로 로직(기능)의 변화 없이 단순 함수 내부에서만 사용하는 이름을 변경하였거나, 코드 pretty 등을 적용했을 경우
-test: 테스트 코드를 별도로 추가하거나, 변경했을 경우, 만약 기능을 추가하면서 테스트 코드를 동시에 작성했으면 feat 타입으로 사용
-chore: 기능/테스트 코드, 문서, 스타일, 리팩토링을 제외한, 배포, 빌드 등과 같이 프로젝트의 기타 작업들에 대해 추가/수정했을 경우, lint 등의 적용으로 코드 스타일을 수정 했을 때도 chore 사용
-release: 릴리스를 하기 위해 패키지 버전을 올리거나, 릴리스 버전 커밋을 찍기 위한 경우

Body:옵션)무엇을 왜 형식으로 작성
*추가/수정한 내용1
*추가/수정한 내용2

Footer
Resolves: 문의나, 요청에 의한 이슈에 해당하는 경우 이슈 번호
Closes: 일반적인 개발과 관련된 이슈에 해당하는 경우 이슈 번호
Fixes: 버그 픽스, 핫 픽스 관련 이슈에 해당하는 경우 이슈 번호
See also: 커밋의 이슈와 연관되어 있는 이슈들이 존재 하는 경우, 또는 관련된 이슈들이 있는 경우 이슈 번호



ex) 예시

feat: 회원가입 UI 페이지 추가 

회원가입 뷰페이지 추가 



feat: 회원정보 난독화 코드 적용

*회원 전화번호 난독화 적용 저장
*회원 집주소를 난독화 적용 저장
 

fix: [#1001]회원 탈퇴 프로세스 버그 수정

*회원 탈퇴 처리시 회원정보 삭제하지 않고 비활성화 처리 적용

Resolves: #1001
See also: #1000, #1002






